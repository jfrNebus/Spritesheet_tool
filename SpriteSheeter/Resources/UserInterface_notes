//Boolean to be used to  toggle on/off the movement of the main map scroller by using directional keys.

private boolean toggleSpriteMovement = false;

---------------------------

//The scale ratio for the main map pic. This will modify the size for the main map to be displayed,
//through multiplying map's values by its value.

private int mapScale = 1;

---------------------------

//The scale ratio for each individual sprite size. This will modify the size of the sprite side multiplying it
//by its value.

private int spriteListScale = 1;

---------------------------

/*
The current x and y coordinates of the actual position of the pointer in the map. The x and y coordinates of the
top left point.
    0  1  2  3  4  5
0   *---------------------
1   |
2   | x=2 v y=3
3   |     *----
4   |     |   |
5   |     -----

Top left corner of current position = * => x = 2 y = 3
*/

private int y = 0;
private int x = 0;

---------------------------

//The amount of pixels used by the frame

private final int FRAME_GAP = 1;

---------------------------

private void buildJLabelList(JPanel spritesPanel, int spriteListScaleRatio) {
        int spriteSide = SPRITESHEET.getSpriteSide();
        int targetSide = spriteSide * spriteListScaleRatio;
        int j = 0;
        BufferedImage newImage;
        for (int i = -1; i < SPRITESHEET.getTilesInColumn(); i++) {
            JPanel jPanel = new JPanel();
            jPanel.setLayout(new BoxLayout(jPanel, BoxLayout.X_AXIS));
            spritesPanel.add(jPanel);
            for (; j < (SPRITESHEET.getTilesInColumn() * SPRITESHEET.getTilesInRow()) + 1; j++) {
                BufferedImage spriteToPrint;
                newImage = new BufferedImage(targetSide, targetSide, BufferedImage.TYPE_INT_ARGB);
                Dimension dimension = new Dimension();
                JButton button = new JButton();
                button.addKeyListener(this);
                button.setFocusable(false);
                if (i == -1) {
                    button.setText("Empty sprite");
                    button.setHorizontalAlignment(SwingConstants.LEFT);
                    spriteToPrint = new BufferedImage(spriteSide, spriteSide, BufferedImage.TYPE_INT_ARGB);
                    dimension.width = targetSide * SPRITESHEET.getTilesInRow();
                    dimension.height = targetSide;
                } else {
                    spriteToPrint = SPRITESHEET.getSPRITES_HASHMAP().get(j).getSprite();
                    newImage.createGraphics().drawImage(spriteToPrint, 0, 0, targetSide, targetSide, null);
                    button.setIcon(new ImageIcon(newImage));
                    dimension.setSize(targetSide, targetSide);
                }
                button.setPreferredSize(dimension);
                button.setMaximumSize(dimension);
                //Se tiene que crear una variable local id, aunque ya exista una global, porque para poder
                //usar el valor de j dentro de la declaración del actionListener del botón, dicha variable debe
                //ser final o effectively final. No podemos hacer id = j; y asignarle id al método get
                //spriteSheet.getSPRITES_HASMAP().get(id - 1).getId()); porque para cuando se pulse el botón, y
                //se llame a la acción del botón, el valor de id será el último valor que se le asignase, es
                //decir, el valor del último botón que se crease, la última iteración de este bucle for, donde
                //se estableción id = j. Si el último botón que se creó fue el 540, el valor de id será id = 540
                //y será siempre así. No obstante, id ha de  ser actualizada al valor de innerId dentro de la acción
                //del botón para que cuando se active la función de dibujar de forma constante, el programa sepa
                //cuál es la id que ha de utilizar a la hora de pintar. La función de pintar usa la última id
                //conocida, y esa id se actualiza cada vez que se presiona un botón.
                int innerId = j;
                int finalI = i;
                button.addActionListener(e -> {
//                        https://docs.oracle.com/javase/tutorial/2d/advanced/compositing.html
                    System.out.println("Sprite pressed = " + innerId);
                    //Used to set the kind of Composite to be used in the BufferedImage in use. Check the above
                    //link.
                    if (!actualCanvas.equals(Strings.NO_LAYER)) {
                        Graphics2D pictureGraphics = CANVAS.getLayer(actualCanvas).createGraphics();
                        AlphaComposite ac = AlphaComposite.getInstance(AlphaComposite.SRC);
                        pictureGraphics.setComposite(ac);
                        pictureGraphics.drawImage(spriteToPrint, x, y, null);
                        pictureGraphics.dispose();
                        int arrayIndexY = y / spriteSide;
                        int arrayIndexX = x / spriteSide;
                        int[][] returnedArray = CANVAS.getID_ARRAY_MAP(actualCanvas);
                        returnedArray[arrayIndexY][arrayIndexX] =
                                (finalI == -1) ? innerId : SPRITESHEET.getSPRITES_HASHMAP().get(innerId).getId();
                        id = innerId;
                        updateMainCanvas(mapScale);
                        previousSprite = spriteToPrint;
                    } else {
                        TA.setText("No layer selected.");
                    }
                });
                jPanel.add(button);
                if (j % SPRITESHEET.getTilesInRow() == 0) {
                    break;
                }
            }
            j++;
        }
    }

---------------------------

//Enabled false allows the JScrollPane movement through arrow keys.

picScroller.setEnabled(false);

---------------------------

//The string used for the name of map buttons must include extra empty spaces in order
//to match the length of the strings used for the sprite buttons. both groups of strings
//must be equally long in order to be resized in the same way when the screen resolution
//changes.

        biggerMap = new JButton(Strings.BIGGER_MAP_BUTTON);
        biggerMap.setFocusable(true);
        biggerMap.setEnabled(false);
        biggerMap.addKeyListener(this);
        biggerMap.addMouseListener(this);
        biggerMap.addActionListener(e -> {
            setMapScale(MAP_SCALE_RATIO);
            updateMainCanvas(mapScale);
        });
        biggerMap.setMaximumSize(buttonsDimension);

        smallerMap = new JButton(Strings.SMALLER_MAP_BUTTTON);
        smallerMap.setFocusable(true);
        smallerMap.setEnabled(false);
        smallerMap.addKeyListener(this);
        smallerMap.addMouseListener(this);
        smallerMap.addActionListener(e -> {
            if ((mapScale - MAP_SCALE_RATIO) > 0) {
                setMapScale(-MAP_SCALE_RATIO);
                updateMainCanvas(mapScale);
            }
        });
        smallerMap.setMaximumSize(buttonsDimension);


---------------------------

To be checked:

        if (TA.isEditable()) {
            int key = e.getKeyCode();
            //Next line is set in order to not allow X or Y to reach the end of the pointer BufferedImage.
            //If any coordinate reaches the end of the axis, it would generate the square to be drawn outside
            //of the buffered, since it is the top left coordinate the one which is taken9 in consideration.
            System.out.println("Key = " + key);
            if (TA.hasFocus()) {
                if (key == KeyEvent.VK_ESCAPE) {
                    frame.requestFocus();
                }
            }

---------------------------